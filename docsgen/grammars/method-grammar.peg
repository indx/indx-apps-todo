@import "utils-grammar.peg"

start
	= as:arguments? r:result? d:description_lines
			{ return { args: as, description: d, result: r }; }

arguments
	= a:argument __ as:arguments
			{ return [].concat(as, [a]); }
	/ a:argument
			{ return [a]; }

argument
	= _$_ m:argument_mode _ t:type_statement? _ n:name _ ":"? _ c:comment?
			{ return { mode: m, types: t, name: n, comment: c }; }

argument_mode
	= "@arg"
		{ return { mandatory: true }; }
	/ "@opt"
		{ return { optional: true }; }

result
	= r:return_result
			{ return { "return": r }; }
    / r:async_result
			{ return { "async": r }; }
    / chain_result
			{ return { "chain": true }; }
	/ constructor_result
			{ return { "constructor": true }; }

return_result
	= _$_ "@return" _ t:type_statement? _ c:comment
			{ return { comment: c, types: t }; }

async_result
	= then:async_then_result fail:async_fail_result
			{ return { then: then, fail: fail }; }

async_then_result
	= _$_ "@then" _ cb:callback _ c:comment
			{ return { comment: c, args: cb }; }

async_fail_result
	= _$_ "@fail" _ c:async_fail_result_cases
			{ return { cases: c }; }

async_fail_result_cases
	= c:async_fail_result_case cs:async_fail_result_cases
			{ return [].concat(cs, [c]); }
	/ c:async_fail_result_case
			{ return [c]; }

async_fail_result_case
	= __ $ cb:callback _ c:comment
			{ return { args: cb, comment: c }; }

callback
	= _ "(" _ c:callback_arguments _ ")" _
			{ return c; }

callback_arguments
	= _ c:callback_argument _ "," _ cs:callback_arguments _
			{ return [].concat(cs, [c]); }
	/ _ c:callback_argument _
			{ return [c]; }

callback_argument
	= _ t:type_statement _ c:callback_argument_comment  _
			{ return { type: t, comment: c }; }

callback_argument_comment
	= c:[^\n\r),]*
			{ return c.join(''); }


chain_result
	= _$_ "@chain"

constructor_result
	= $ "@constructor"


type_statement
	= _ "<" _ ts:types _ ">" _
			{ return ts; }

types
	= _ t:type _ "|" _ ts:types _
			{ return [].concat(ts, [t]); }
	/ _ t:type _
			{ return [t]; }

type
	= t: [^|>]+
			{ return { type: t.join('') }; }


